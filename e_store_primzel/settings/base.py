"""
Django settings for e_store_primzel project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from django.utils.translation import gettext_lazy as _

from oscar.defaults import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-t&x9om9(9s_q4qn_*4zj5^u2(__vyfmy47s+zx4st5nl!$2($'

# SECURITY WARNING: don't run with debug turned on in production!
TEMPLATE_DEBUG = DEBUG = eval(os.getenv('PRIMZEL_DEBUG', 'False'))

ALLOWED_HOSTS = ['*']

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

AUTHENTICATION_BACKENDS = (
    'oscar.apps.customer.auth_backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
)

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.simple_backend.SimpleEngine',
    },
}
OSCAR_INITIAL_ORDER_STATUS = 'Pending'
OSCAR_INITIAL_LINE_STATUS = 'Pending'
OSCAR_ORDER_STATUS_PIPELINE = {
    'Pending': ('Being processed', 'Cancelled',),
    'Being processed': ('Processed', 'Cancelled',),
    'Cancelled': (),
}

OSCAR_SHOP_NAME = 'Primzel Shop'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

INTERNAL_IPS = [
    # ...
    '127.0.0.1',
    'hoko.localhost',
    'localhost',
    '172.19.0.8', # docker container ip from request is coming.
    # ...
]

EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
# Search facets
OSCAR_SEARCH_FACETS = {
    "fields": {
        # The key for these dicts will be used when passing facet data
        # to the template. Same for the 'queries' dict below.
        "product_class": {"name": _("Type"), "field": "product_class"},
        "rating": {"name": _("Rating"), "field": "rating"},
        # You can specify an 'options' element that will be passed to the
        # SearchQuerySet.facet() call.
        # For instance, with Elasticsearch backend, 'options': {'order': 'term'}
        # will sort items in a facet by title instead of number of items.
        # It's hard to get 'missing' to work
        # correctly though as of Solr's hilarious syntax for selecting
        # items without a specific facet:
        # http://wiki.apache.org/solr/SimpleFacetParameters#facet.method
        # 'options': {'missing': 'true'}
    },
    "queries": {
        "price_range": {
            "name": _("Price range"),
            "field": "price",
            "queries": [
                # This is a list of (name, query) tuples where the name will
                # be displayed on the front-end.
                (_("0 to 20"), "[0 TO 20]"),
                (_("20 to 40"), "[20 TO 40]"),
                (_("40 to 60"), "[40 TO 60]"),
                (_("60+"), "[60 TO *]"),
            ],
        },
    },
}
OSCAR_DASHBOARD_NAVIGATION += [
    {
        'label': _('Configurable Partner Menu'),
        'icon': 'glyphicon-tree-conifer',
        'children': [
            {
                'label': _('Create Menu'),
                'url_name': 'dashboard:configurable_menu:partner-configurable-menu-create',
            },
            {
                'label': _('All Menus'),
                'url_name': 'dashboard:configurable_menu:partner-configurable-menu-listing',
            }
        ]
    },
    {
        'label': _('Payment'),
        'icon': 'glyphicon-usd',
        'children': [
            {
                'label': _('Bankcards'),
                'url_name': 'dashboard:dashboard_payment:bankcards-list',
            },
            {
                'label': _('Payment methods'),
                'url_name': 'dashboard:dashboard_payment:payment_methods-list',
            },
            {
                'label': _('Source Types'),
                'url_name': 'dashboard:dashboard_payment:source_types-list',
            },
            {
                'label': _('Sources'),
                'url_name': 'dashboard:dashboard_payment:sources-list',
            },
            {
                'label': _('Transactions'),
                'url_name': 'dashboard:dashboard_payment:transactions-list',
            },
            {
                'label': _('Available payment gateways'),
                'url_name': 'dashboard:dashboard_payment:payment_gateways-list',
            },
        ]
    },
    {
        'label': _('Settings'),
        'icon': 'glyphicon-tree-conifer',
        'children': [
            {
                'label': _('Banners'),
                'url_name': 'dashboard:dashboard_banners:banners-listing',
            },
            {
                'label': _('New Banner'),
                'url_name': 'dashboard:dashboard_banners:banners-create',
            }
        ]
    }
]
